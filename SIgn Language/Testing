import cv2
from cvzone.HandTrackingModule import HandDetector
from cvzone.ClassificationModule import Classifier
import numpy as np
import math

# Initialize the video capture, hand detector, and classifier
cap = cv2.VideoCapture(0)
detector = HandDetector(maxHands=1)

# Specify the paths to the model and label files
model_path = r"C:\Users\jmana\OneDrive\Desktop\Keras\2\keras_model.h5"
label_path = r"C:\Users\jmana\OneDrive\Desktop\Keras\2\labels.txt"
try:
    classifier = Classifier(model_path, label_path)
except Exception as e:
    print(f"Error initializing classifier: {e}")
    cap.release()
    cv2.destroyAllWindows()
    exit()

offset = 20
imgSize = 300
counter = 0

# Define the labels for the classifications
labels = ["Hello","Yes","No","Help","Thalaiva","Thanks"]

while True:
    success, img = cap.read()
    imgOutput = img.copy()
    
    # Find hands in the image
    hands, img = detector.findHands(img)
    
    if hands:
        hand = hands[0]
        x, y, w, h = hand['bbox']
        
        # Check if width and height are valid
        if w <= 0 or h <= 0:
            print("Invalid width or height for cropping.")
            continue
        
        # Create a white image to place the resized hand image
        imgWhite = np.ones((imgSize, imgSize, 3), np.uint8) * 255
        
        # Crop and resize the hand image
        imgCrop = img[y-offset:y + h + offset, x-offset:x + w + offset]
        
        # Debugging information
        if imgCrop.size == 0:
            print("Cropped image is empty. Skipping...")
            continue

        imgCropShape = imgCrop.shape
        print(f"imgCrop shape: {imgCropShape}")

        aspectRatio = h / w

        if aspectRatio > 1:
            # Resize based on height
            k = imgSize / h
            wCal = math.ceil(k * w)
            imgResize = cv2.resize(imgCrop, (wCal, imgSize))
            imgResizeShape = imgResize.shape
            wGap = math.ceil((imgSize - wCal) / 2)
            imgWhite[:, wGap: wCal + wGap] = imgResize
            prediction, index = classifier.getPrediction(imgWhite, draw=False)
            print(prediction, index)

        else:
            # Resize based on width
            k = imgSize / w
            hCal = math.ceil(k * h)
            imgResize = cv2.resize(imgCrop, (imgSize, hCal))
            imgResizeShape = imgResize.shape
            hGap = math.ceil((imgSize - hCal) / 2)
            imgWhite[hGap: hCal + hGap, :] = imgResize
            prediction, index = classifier.getPrediction(imgWhite, draw=False)

        # Draw a rectangle around the hand and show the label
        cv2.rectangle(imgOutput, (x-offset, y-offset-70), (x-offset+400, y-offset+60-50), (0, 255, 0), cv2.FILLED)
        cv2.putText(imgOutput, labels[index], (x, y-30), cv2.FONT_HERSHEY_COMPLEX, 2, (0, 0, 0), 2)
        cv2.rectangle(imgOutput, (x-offset, y-offset), (x + w + offset, y + h + offset), (0, 255, 0), 4)
        
        # Show the cropped and resized images
        cv2.imshow('ImageCrop', imgCrop)
        cv2.imshow('ImageWhite', imgWhite)

    # Show the main image with the hand detection and classification
    cv2.imshow('Image', imgOutput)
    
    # Break the loop when 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture and close all windows
cap.release()
cv2.destroyAllWindows()
